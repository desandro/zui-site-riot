---

title: ZUI Site Riot
layout: article

---

### Tutorial info
 
+ **Knowledge needed:** CSS, Intermediate JavaScript
+ **Requires:** text editor, browser that supports CSS3 transforms
+ **Project time:** 4 hours

* * *

With CSS3 transforms now supported in most major browsers, we have the delightful opportunity to experiment creating innovative layouts and interfaces. While the paradigm of the vertical website will continue to prosper, there's a world of possibilities out there to explore. No longer are we shackled in our one-dimensional prisons, bound to the tyranny of vertically-scrolling sites.

With the site for BeerCamp at SXSW 2011 ([2011.beercamp.com](http://2011.beercamp.com)), we at nclud recognized an ideal opportunity to bend some rules and try something new. I got the idea to leverage CSS transforms for the layout. Instead of the typical vertical scrolling site, where you traversed it downwards, this would could be traversed _inwards_. This is sort of design pattern has been categorized as a Zoomable User Interface or ZUI.

 <div class="aside"><div>
<p>The BeerCamp at SXSW 2011 was an experiment in using CSS transforms to create a new interface design pattern.</p>
<p><a href="http://s3.amazonaws.com/ember/U9Zhuu3Vf2frBxrNrNsoldLp2N55Weq7_o.png">View hi-res</a></p>
</div></div>

[![BeerCamp at SXSW 2011](http://s3.amazonaws.com/ember/U9Zhuu3Vf2frBxrNrNsoldLp2N55Weq7_m.jpg)](http://2011.beercamp.com)

In this tutorial, let's build a Zoomable User Interface into a simple page. We will learn:

+ How to use CSS transforms to layout a Zoomable User Interface
+ How to hi-jack scrolling to manipulate the zoom
+ How to add CSS transitions to make an impressive interaction

Our example page lists the services of a web development shop. The services listed range from the broad to the specific. This content is well suited for a zoomable layout, as the subsequent sections are smaller segments of the previous sections. By placing one visual element inside another, you are visually communicating the  relationship between pieces of content. The five sections for our page are Web development, Front-end development, CSS, CSS3, and Transforms.

## Basic layout

  <div class="aside"><div>
<p class="caption">Before we create a zoomable layout, we need to set up a basic layout that is designed for browsers without support CSS transforms or browsers with JavaScript disabled.</p>
<p><a href="demo1.html"><img src="http://i.imgur.com/53jXt.png" alt="ZUI Site Riot - Demo 1 - Basic Layout screenshot" style="width: 165px" /></a></p>
<p><a href="http://s3.amazonaws.com/ember/OcgEEVgIZvBP1GVtQ7CaIbeL8u5Nosz9_o.png">View hi-res</a></p>
</div></div>

When laying out the sections of this page, we need to consider how each section will fit inside one another. I've chosen to use a ratio of 3:1 for the proportion between the current section and its subsequent section. In addition to adhering to the ideal compositional Rule of Thirds, this is a reasonable ratio for parent/child sizes and the parent will have enough room for content, and the child container will still be visible. The area of each section will be 900px x 540px so it fits within most browser windows. Subsequent sections will have dimensions one-third the full size, 300px x 180px.

The basic markup of the site will look like the following:

    <div id="wrap">
      <div id="container">
        <ul id="nav">...</ul>
        <div id="content">
          <section id="web-dev">...</section>
          <section id="front-end">...</section>
          <section id="css">...</section>
          <section id="css3">...</section>
          <section id="transforms">...</section>
        </div> <!-- #content -->
      </div> <!-- #container -->
    </div> <!-- #wrap -->

The first draft of the site has the content laid out in the typical vertical pattern. This version is important as this is what we can expect to provide to browsers that do not support CSS transforms or have JavaScript disabled. The rest of the effects will be built with progressive enhancement.  Users with less-capable browsers will still be able to consume the content.

You'll notice that each section has an empty space in the center of it.  This space has been reserved for the subsequent sections to fit inside it once CSS transforms are put in place.

See [Demo 1 - Basic layout](demo1.html)

## Adding transforms

With the basic layout established, we can now start adding CSS transforms. Before we jump in with the CSS, let's add Modernizr so we have more control over how browsers will inherit their styles.  I opted to use a custom build from the Modernizr 2.0 beta preview, that only tests for CSS 2D transforms and CSS transitions 
([modernizr.github.com/Modernizr/2.0-beta/#csstransforms-csstransitions-iepp](http://modernizr.github.com/Modernizr/2.0-beta/#csstransforms-csstransitions-iepp)). After adding the Modernizr code to our scripts, we can target browsers that support transforms with `.csstransforms` in our CSS.

To scale each section inside one another, they first need to occupy the same space.  This can be done with absolute positioning.

    .csstransforms #container { position: relative; }
    .csstransforms #content { position: absolute; }
    .csstransforms section { position: absolute; }

Each section needs to have its own scale set. As the proportion we are using is 3:1, essentially each section will be one third the size of the previous. This can be calculated as the inverse ration to the exponent of the  level's zero-based index:

    zoomScale = inverse ratio ^ zero-based-level

The scale of first level, `#web-dev` is `(1/3) ^ 0` or just 1, so we don't need to set that superfluous style.  The scale of the second level, `#front-end` is `(1/3) ^ 1` or 1/3 or in decimal `0.3333`. The scale of the third level `#css` is  `(1/3) ^ 2` or 1/9 or in decimal `0.1111`.  We'll apply this value to the various vendor-prefix `transform` CSS properties for all four of our subsequent sections.

  <div class="aside"><div>
<p><img src="http://desandro.com/work/zui-site-riot/html5css3.png" alt="CSS3 logo" style="width: 330px;"></p>
<p>CSS3 is the principal technology that enables the ZUI for this page. We are leveraging transforms and transitions.</p>
<p><a href="http://desandro.com/work/zui-site-riot/html5css3.png">View hi-res</a></p>
</div></div>

    /* level index 1: (1/3) ^ 1 = 1/3 = 0.3333 */
    .csstransforms #front-end {
      -webkit-transform: scale(0.3333);
         -moz-transform: scale(0.3333);
           -o-transform: scale(0.3333);
              transform: scale(0.3333);
    }
    /* level index 2: (1/3) ^ 2 ) = 1/9 = 0.1111 */
    .csstransforms #css {
      -webkit-transform: scale(0.1111);
         -moz-transform: scale(0.1111);
           -o-transform: scale(0.1111);
              transform: scale(0.1111);
    }
    /* level index 3: (1/3) ^ 3 = 1/27 = 0.0370 */
    .csstransforms #css3 {
      -webkit-transform: scale(0.037);
         -moz-transform: scale(0.037);
           -o-transform: scale(0.037);
              transform: scale(0.037);
    }
    /* level index 4: (1/3) ^ 4 = 1/81 = 0.0123456 */
    .csstransforms #transforms {
      -webkit-transform: scale(0.0123456);
         -moz-transform: scale(0.0123456);
           -o-transform: scale(0.0123456);
              transform: scale(0.0123456);
    }

Awesome! The sections have been transformed to fit inside one another, like Russian nesting dolls.

See [Demo 2 - Scaled sections](demo2.html)

  <div class="aside"><div>
<p>Each section is positioned inside one another using CSS <code>scale</code> transforms.   You can see the second section within the first, and if you look closely, you'll find the others deeper within.</p>
<p><a href="http://s3.amazonaws.com/ember/1P7jgub6IklObU0YN3BXXuDXH4GVxAAC_o.png">View hi-res</a></p>
</div></div>

[![Demo 2 - Scaled sections screenshot](http://s3.amazonaws.com/ember/1P7jgub6IklObU0YN3BXXuDXH4GVxAAC_o.png)](demo2.html)

Now we need to build a mechanism to enable the user the zoom in. To zoom in to a section, we only need to apply its reciprocal scale to the sections' parent `#content`. All child sections will be scaled up accordingly.  In mathematical terms, the scale is equal to the ratio to the exponent of level's zero-base index. The second section `#front-end` has a scale of 1/3, so it needs to be scaled 3x to bring it to 100% size.

    zoomScale = ratio ^ zero-based-level

The scale to view the third level would be `3 ^ 2 = 9`. For the fourth level, the scale would be `3 ^ 3 = 27`.

    .csstransforms #content {
      -webkit-transform: scale(27);
         -moz-transform: scale(27);
           -o-transform: scale(27);
              transform: scale(27);
    }

See [Demo 3 - Fixed zoom](demo3.html)

  <div class="aside"><div>
<p>Applying a scale that increases the size of container will zoom in on its content.</p>
<p><a href="http://s3.amazonaws.com/ember/zCa4GlWMxTB3BA36GADGIFDGNSm5v2sK_o.png">View hi-res</a></p>
</div></div>

[![Demo 3 - Fixed zoom](http://s3.amazonaws.com/ember/zCa4GlWMxTB3BA36GADGIFDGNSm5v2sK_o.png)](demo3.html)


## Scroll

Leveraging window scrolling is a natural convenient interaction to hook zooming into.  Along side clicking and pointing, scrolling is a natural interaction that anyone with a mouse or keyboard uses.

Currently there is not anything to scroll, since the entire page is self contained in that 900 x 540 area. But we can fake it by adding an empty element that has height, which will serve as our proxy. The mark up will be added after `#wrap`.

    </div> <!-- #wrap -->
    <div id="scroller"></div>

In the CSS, set an arbitrary height on `#scroller`.  `4000px` works, as an approximate height of the page before we added the scale transforms.

    .csstransforms #scroller { height: 4000px; }

But we don't want the content to scroll with the rest of the page, so we can use fixed positioning to fix the actual content in its same place.

    #wrap { 
      position: fixed; 
      width: 100%;
    }

The page scrolls, but the content remains static. Now the fun begins as we jump into scriptin'.

## JavaScript

The basic idea is that we are going to hijack the scroll event and do something with it.

  <div class="aside"><div>
<p>Hijacking the scroll behavior enables users to zoom in to inner content.</p>
<p><a href="http://desandro.com/work/zui-site-riot">Get hi-res 'scroll' screenshots</a></p>
</div></div>

[![Demo 4 - Scroll to zoom](http://desandro.com/work/zui-site-riot/scrolling.png)](demo4.html)

As all this script will only need to run if the browser supports CSS transforms, we can encapsulate our entire script in a self-executing function, which will only proceed if CSS transforms are supported. 

    (function(){
      // only proceed if CSS transforms are supported
      if ( !Modernizr.csstransforms ) { return; }
      // CSS transforms supported, continue...
    })();

I'm using a constructor design pattern `Zoomer` which will do all the work. The `Zoomer` constructor requires a DOM node, specifically the content container, which will be passed in later. It holds properties like `scrolled` which will be the vertical scroll position, `levels` which is the zero-based number of sections, and the height of the page in `docHeight`. Most importantly, we pass it in as an event listener to the window's scroll event.


    // the constructor that will do all the work
    function Zoomer( content ) {
      this.content = content;
      this.scrolled = 0;
      this.levels = 4;
      this.docHeight = document.documentElement.offsetHeight;
      // bind Zoomer to scroll event
      window.addEventListener( 'scroll', this, false);
    }

The `handleEvent` method allows the constructor to be used as an event listener, so we can properly use `this` in `window.addEventListener( 'scroll', this, false)`. If a method matches the event's type, that method will be called. So we can bind `Zoomer.prototype.scroll` to the window's scroll event. 

    Zoomer.prototype.handleEvent = function( event ) {
      if ( this[event.type] ) {
        this[event.type](event);
      }
    };

`Zoomer.prototype.scroll` is where the magic will be happening. We first need to calculate the current position of the scroll relative the height of the page. `this.scrolled` is a normalized decimal value, from 0 to 1, that represents the position of the scrolled page.

    Zoomer.prototype.scroll = function( event ) {
      this.scrolled = window.scrollY / ( this.docHeight - window.innerHeight );
    };

We can take that `scrolled` value and use it for our scale value to zoom into the content.  We can use the same math we applied with the CSS above, except we are now using a percentage.  Its value goes from 0 to 1, so we need to multiply it by the zero-based number of sections.

    zoomScale = ratio ^ ( percentage * levels )

This value can be applied as a CSS transform. We need to set all the vendor specific CSS properties for `transform` with the `transformValue`.

    Zoomer.prototype.scroll = function( event ) {
      this.scrolled = window.scrollY / ( this.docHeight - window.innerHeight );
      var scale = Math.pow( 3, this.scrolled * this.levels ),
          transformValue = 'scale('+scale+')';
      this.content.style.WebkitTransform = transformValue;
      this.content.style.MozTransform = transformValue;
      this.content.style.OTransform = transformValue;
      this.content.style.transform = transformValue;
    };

All that's left is to initialize a new `Zoomer` instance, pass in the `#content` DOM node, and start it up on 

    function init() {
      var content = document.getElementById('content'),
          // init Zoomer constructor
          ZUI = new Zoomer( content );
    }
    window.addEventListener( 'DOMContentLoaded', init, false );

Now the content zooms when you scroll. And everybody goes "Whooaaaaaaaaa."

See [Demo 4 - Scroll to zoom](demo4.html)

  <div class="aside"><div>
<p>If done correctly, when you scroll to the bottom of the page, you'll zoom in perfectly to the last section.</p>
<p><a href="http://desandro.com/work/zui-site-riot/screenshot-end.png">View hi-res</a></p>
</div></div>

![Transform end](http://desandro.com/work/zui-site-riot/screenshot-end.png)

## Completion

Behold what you have accomplished! Not only have you produced a pioneer in the realm of web interface development, but you have built it in such a way that it will be fun to use and engaging to interact with. Well done!

### About the author

+ **Name:** David DeSandro
+ **Site:** [desandro.com](http://desandro.com)
+ **Expertise:** Creative programming with CSS and JavaScript
+ **Clients:** Apple, Oracle, Mashable
+ **Photo** [![Headshot by Dave DeSandro, on Flickr](http://farm4.static.flickr.com/3570/3819300088_33ec7dcc95_z.jpg)](http://www.flickr.com/photos/nemoorange/3819300088/) [Hi-res available](http://www.flickr.com/photos/nemoorange/3819300088/sizes/o/)